# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_msgs/DetectedObjectArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import autoware_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class DetectedObjectArray(genpy.Message):
  _md5sum = "d360796682d5aaa5d9244996f9cea815"
  _type = "autoware_msgs/DetectedObjectArray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
DetectedObject[] objects
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: autoware_msgs/DetectedObject
std_msgs/Header header

uint32 id
string label

geometry_msgs/Pose pose
geometry_msgs/Vector3 dimensions
geometry_msgs/Vector3 variance
geometry_msgs/Twist velocity

geometry_msgs/PolygonStamped convex_hull
autoware_msgs/LaneArray candidate_trajectories

bool pose_reliable
bool velocity_reliable

# Behavior State of the Detected Object
# FORWARD_STATE			= 0
# STOPPING_STATE 		= 1
# BRANCH_LEFT_STATE		= 2
# BRANCH_RIGHT_STATE	= 3 
# YIELDING_STATE		= 4
# ACCELERATING_STATE	= 5
# SLOWDOWN_STATE 		= 6

uint32 behavior_state
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/PolygonStamped
# This represents a Polygon with reference coordinate frame and timestamp
Header header
Polygon polygon

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: autoware_msgs/LaneArray
lane[] lanes
================================================================================
MSG: autoware_msgs/lane
Header header
int32 increment
int32 lane_id
waypoint[] waypoints

================================================================================
MSG: autoware_msgs/waypoint
# global id
int32 gid 
# local id
int32 lid
geometry_msgs/PoseStamped pose
geometry_msgs/TwistStamped twist
dtlane dtlane
int32 change_flag
WaypointState wpstate

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: autoware_msgs/dtlane
float64 dist
float64 dir
float64 apara
float64 r
float64 slope
float64 cant
float64 lw
float64 rw

================================================================================
MSG: autoware_msgs/WaypointState
int32 aid
uint8 NULLSTATE=0
uint8 lanechange_state

uint8 steering_state
uint8 STR_LEFT=1
uint8 STR_RIGHT=2
uint8 STR_STRAIGHT=3

uint8 accel_state
uint8 stopline_state
  uint8 TYPE_NULL=0
  uint8 TYPE_STOPLINE=1
  uint8 TYPE_STOP=2
# 1 is stopline, 2 is stop which 2 can only be released manually.
uint64 event_state
"""
  __slots__ = ['header','objects']
  _slot_types = ['std_msgs/Header','autoware_msgs/DetectedObject[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectedObjectArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = []
    else:
      self.header = std_msgs.msg.Header()
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.pose
        _v4 = _v3.position
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = _v3.orientation
        _x = _v5
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v6 = val1.dimensions
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = val1.variance
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = val1.velocity
        _v9 = _v8.linear
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = _v8.angular
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = val1.convex_hull
        _v12 = _v11.header
        _x = _v12.seq
        buff.write(_get_struct_I().pack(_x))
        _v13 = _v12.stamp
        _x = _v13
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v12.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v14 = _v11.polygon
        length = len(_v14.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v14.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v15 = val1.candidate_trajectories
        length = len(_v15.lanes)
        buff.write(_struct_I.pack(length))
        for val3 in _v15.lanes:
          _v16 = val3.header
          _x = _v16.seq
          buff.write(_get_struct_I().pack(_x))
          _v17 = _v16.stamp
          _x = _v17
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v16.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2i().pack(_x.increment, _x.lane_id))
          length = len(val3.waypoints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.waypoints:
            _x = val4
            buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
            _v18 = val4.pose
            _v19 = _v18.header
            _x = _v19.seq
            buff.write(_get_struct_I().pack(_x))
            _v20 = _v19.stamp
            _x = _v20
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v19.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v21 = _v18.pose
            _v22 = _v21.position
            _x = _v22
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v23 = _v21.orientation
            _x = _v23
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _v24 = val4.twist
            _v25 = _v24.header
            _x = _v25.seq
            buff.write(_get_struct_I().pack(_x))
            _v26 = _v25.stamp
            _x = _v26
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v25.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v27 = _v24.twist
            _v28 = _v27.linear
            _x = _v28
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v29 = _v27.angular
            _x = _v29
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v30 = val4.dtlane
            _x = _v30
            buff.write(_get_struct_8d().pack(_x.dist, _x.dir, _x.apara, _x.r, _x.slope, _x.cant, _x.lw, _x.rw))
            _x = val4.change_flag
            buff.write(_get_struct_i().pack(_x))
            _v31 = val4.wpstate
            _x = _v31
            buff.write(_get_struct_i4BQ().pack(_x.aid, _x.lanechange_state, _x.steering_state, _x.accel_state, _x.stopline_state, _x.event_state))
        _x = val1
        buff.write(_get_struct_2BI().pack(_x.pose_reliable, _x.velocity_reliable, _x.behavior_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.DetectedObject()
        _v32 = val1.header
        start = end
        end += 4
        (_v32.seq,) = _get_struct_I().unpack(str[start:end])
        _v33 = _v32.stamp
        _x = _v33
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v32.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v32.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _v34 = val1.pose
        _v35 = _v34.position
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v36 = _v34.orientation
        _x = _v36
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v37 = val1.dimensions
        _x = _v37
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v38 = val1.variance
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v39 = val1.velocity
        _v40 = _v39.linear
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v41 = _v39.angular
        _x = _v41
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v42 = val1.convex_hull
        _v43 = _v42.header
        start = end
        end += 4
        (_v43.seq,) = _get_struct_I().unpack(str[start:end])
        _v44 = _v43.stamp
        _x = _v44
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v43.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v43.frame_id = str[start:end]
        _v45 = _v42.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v45.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v45.points.append(val4)
        _v46 = val1.candidate_trajectories
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v46.lanes = []
        for i in range(0, length):
          val3 = autoware_msgs.msg.lane()
          _v47 = val3.header
          start = end
          end += 4
          (_v47.seq,) = _get_struct_I().unpack(str[start:end])
          _v48 = _v47.stamp
          _x = _v48
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v47.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v47.frame_id = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.increment, _x.lane_id,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.waypoints = []
          for i in range(0, length):
            val4 = autoware_msgs.msg.waypoint()
            _x = val4
            start = end
            end += 8
            (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
            _v49 = val4.pose
            _v50 = _v49.header
            start = end
            end += 4
            (_v50.seq,) = _get_struct_I().unpack(str[start:end])
            _v51 = _v50.stamp
            _x = _v51
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v50.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v50.frame_id = str[start:end]
            _v52 = _v49.pose
            _v53 = _v52.position
            _x = _v53
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v54 = _v52.orientation
            _x = _v54
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v55 = val4.twist
            _v56 = _v55.header
            start = end
            end += 4
            (_v56.seq,) = _get_struct_I().unpack(str[start:end])
            _v57 = _v56.stamp
            _x = _v57
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v56.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v56.frame_id = str[start:end]
            _v58 = _v55.twist
            _v59 = _v58.linear
            _x = _v59
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v60 = _v58.angular
            _x = _v60
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v61 = val4.dtlane
            _x = _v61
            start = end
            end += 64
            (_x.dist, _x.dir, _x.apara, _x.r, _x.slope, _x.cant, _x.lw, _x.rw,) = _get_struct_8d().unpack(str[start:end])
            start = end
            end += 4
            (val4.change_flag,) = _get_struct_i().unpack(str[start:end])
            _v62 = val4.wpstate
            _x = _v62
            start = end
            end += 16
            (_x.aid, _x.lanechange_state, _x.steering_state, _x.accel_state, _x.stopline_state, _x.event_state,) = _get_struct_i4BQ().unpack(str[start:end])
            val3.waypoints.append(val4)
          _v46.lanes.append(val3)
        _x = val1
        start = end
        end += 6
        (_x.pose_reliable, _x.velocity_reliable, _x.behavior_state,) = _get_struct_2BI().unpack(str[start:end])
        val1.pose_reliable = bool(val1.pose_reliable)
        val1.velocity_reliable = bool(val1.velocity_reliable)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v63 = val1.header
        _x = _v63.seq
        buff.write(_get_struct_I().pack(_x))
        _v64 = _v63.stamp
        _x = _v64
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v63.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v65 = val1.pose
        _v66 = _v65.position
        _x = _v66
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v67 = _v65.orientation
        _x = _v67
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v68 = val1.dimensions
        _x = _v68
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v69 = val1.variance
        _x = _v69
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v70 = val1.velocity
        _v71 = _v70.linear
        _x = _v71
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v72 = _v70.angular
        _x = _v72
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v73 = val1.convex_hull
        _v74 = _v73.header
        _x = _v74.seq
        buff.write(_get_struct_I().pack(_x))
        _v75 = _v74.stamp
        _x = _v75
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v74.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v76 = _v73.polygon
        length = len(_v76.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v76.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v77 = val1.candidate_trajectories
        length = len(_v77.lanes)
        buff.write(_struct_I.pack(length))
        for val3 in _v77.lanes:
          _v78 = val3.header
          _x = _v78.seq
          buff.write(_get_struct_I().pack(_x))
          _v79 = _v78.stamp
          _x = _v79
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v78.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_2i().pack(_x.increment, _x.lane_id))
          length = len(val3.waypoints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.waypoints:
            _x = val4
            buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
            _v80 = val4.pose
            _v81 = _v80.header
            _x = _v81.seq
            buff.write(_get_struct_I().pack(_x))
            _v82 = _v81.stamp
            _x = _v82
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v81.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v83 = _v80.pose
            _v84 = _v83.position
            _x = _v84
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v85 = _v83.orientation
            _x = _v85
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _v86 = val4.twist
            _v87 = _v86.header
            _x = _v87.seq
            buff.write(_get_struct_I().pack(_x))
            _v88 = _v87.stamp
            _x = _v88
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v87.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v89 = _v86.twist
            _v90 = _v89.linear
            _x = _v90
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v91 = _v89.angular
            _x = _v91
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v92 = val4.dtlane
            _x = _v92
            buff.write(_get_struct_8d().pack(_x.dist, _x.dir, _x.apara, _x.r, _x.slope, _x.cant, _x.lw, _x.rw))
            _x = val4.change_flag
            buff.write(_get_struct_i().pack(_x))
            _v93 = val4.wpstate
            _x = _v93
            buff.write(_get_struct_i4BQ().pack(_x.aid, _x.lanechange_state, _x.steering_state, _x.accel_state, _x.stopline_state, _x.event_state))
        _x = val1
        buff.write(_get_struct_2BI().pack(_x.pose_reliable, _x.velocity_reliable, _x.behavior_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = autoware_msgs.msg.DetectedObject()
        _v94 = val1.header
        start = end
        end += 4
        (_v94.seq,) = _get_struct_I().unpack(str[start:end])
        _v95 = _v94.stamp
        _x = _v95
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v94.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v94.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.label = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = str[start:end]
        _v96 = val1.pose
        _v97 = _v96.position
        _x = _v97
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v98 = _v96.orientation
        _x = _v98
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v99 = val1.dimensions
        _x = _v99
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v100 = val1.variance
        _x = _v100
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v101 = val1.velocity
        _v102 = _v101.linear
        _x = _v102
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v103 = _v101.angular
        _x = _v103
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v104 = val1.convex_hull
        _v105 = _v104.header
        start = end
        end += 4
        (_v105.seq,) = _get_struct_I().unpack(str[start:end])
        _v106 = _v105.stamp
        _x = _v106
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v105.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v105.frame_id = str[start:end]
        _v107 = _v104.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v107.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v107.points.append(val4)
        _v108 = val1.candidate_trajectories
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v108.lanes = []
        for i in range(0, length):
          val3 = autoware_msgs.msg.lane()
          _v109 = val3.header
          start = end
          end += 4
          (_v109.seq,) = _get_struct_I().unpack(str[start:end])
          _v110 = _v109.stamp
          _x = _v110
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v109.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v109.frame_id = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.increment, _x.lane_id,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.waypoints = []
          for i in range(0, length):
            val4 = autoware_msgs.msg.waypoint()
            _x = val4
            start = end
            end += 8
            (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
            _v111 = val4.pose
            _v112 = _v111.header
            start = end
            end += 4
            (_v112.seq,) = _get_struct_I().unpack(str[start:end])
            _v113 = _v112.stamp
            _x = _v113
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v112.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v112.frame_id = str[start:end]
            _v114 = _v111.pose
            _v115 = _v114.position
            _x = _v115
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v116 = _v114.orientation
            _x = _v116
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v117 = val4.twist
            _v118 = _v117.header
            start = end
            end += 4
            (_v118.seq,) = _get_struct_I().unpack(str[start:end])
            _v119 = _v118.stamp
            _x = _v119
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v118.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v118.frame_id = str[start:end]
            _v120 = _v117.twist
            _v121 = _v120.linear
            _x = _v121
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v122 = _v120.angular
            _x = _v122
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v123 = val4.dtlane
            _x = _v123
            start = end
            end += 64
            (_x.dist, _x.dir, _x.apara, _x.r, _x.slope, _x.cant, _x.lw, _x.rw,) = _get_struct_8d().unpack(str[start:end])
            start = end
            end += 4
            (val4.change_flag,) = _get_struct_i().unpack(str[start:end])
            _v124 = val4.wpstate
            _x = _v124
            start = end
            end += 16
            (_x.aid, _x.lanechange_state, _x.steering_state, _x.accel_state, _x.stopline_state, _x.event_state,) = _get_struct_i4BQ().unpack(str[start:end])
            val3.waypoints.append(val4)
          _v108.lanes.append(val3)
        _x = val1
        start = end
        end += 6
        (_x.pose_reliable, _x.velocity_reliable, _x.behavior_state,) = _get_struct_2BI().unpack(str[start:end])
        val1.pose_reliable = bool(val1.pose_reliable)
        val1.velocity_reliable = bool(val1.velocity_reliable)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BI = None
def _get_struct_2BI():
    global _struct_2BI
    if _struct_2BI is None:
        _struct_2BI = struct.Struct("<2BI")
    return _struct_2BI
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i4BQ = None
def _get_struct_i4BQ():
    global _struct_i4BQ
    if _struct_i4BQ is None:
        _struct_i4BQ = struct.Struct("<i4BQ")
    return _struct_i4BQ
